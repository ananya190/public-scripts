#!/Users/ananyageorge/opt/anaconda3/bin/python

import os
import json
import subprocess
from termcolor import cprint
from prompt_toolkit import prompt
from prompt_toolkit.completion import FuzzyWordCompleter

# get list of files from keys directory
# path = f"{os.environ.get('HOME')}/.local/share/keys/data/"
path = f"{os.environ.get('HOME')}/.scripts/keybind-helper/keys/data/"

# if we ever add directories to the keys directory we will have to change this
# find json files
list_of_files = [f for f in os.listdir(path) if f.endswith(".json")]

fuzzy_file_completer = FuzzyWordCompleter(
    [f.removesuffix(".json") for f in list_of_files])

prompt_for_program = prompt("enter the program: ",
                            completer=fuzzy_file_completer)

program_chosen = prompt_for_program + ".json"

if program_chosen not in list_of_files:
    print("sorry, the program: {} is not in our database".format(prompt_for_program))
    exit(0)

# read the json data into the program
with open(os.path.join(path, program_chosen)) as f:
    contents = json.load(f)

# fuzzy search descriptions and names of commands or display them all

shortcut_output = ""
while True:
    choice = input("enter 0 for fuzzy search, 1 to print them all: ")
    if choice == "0":
        fzf_string = '\n'.join([cmd['command'] + ': ' + cmd['description'] + ': ' + cmd['shortcut']
                               for cmd in contents['commands']])
        actual_fzf_string = subprocess.check_output(
            f"echo \"{fzf_string}\" | fzf -m --no-preview", shell=True).decode().split("\n")
        for i in actual_fzf_string:
            for j in i.split(": "):
                shortcut_output += f"{j:<50}"
            shortcut_output += "\n" if i else ""
        break
    elif choice == "1":
        shortcut_output = '\n'.join(
            [f"{cmd['command']:<50}{cmd['description']:<50}{cmd['shortcut']:<50}" for cmd in contents['commands']])
        break
    else:
        print("enter either 0 or 1")

header = "{:<50}{:<50}{:<50}".format("command", "description", "shortcut")
cprint(header, attrs=["bold"])
print(shortcut_output)
